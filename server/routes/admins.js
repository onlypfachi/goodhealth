import express from 'express';
import bcrypt from 'bcryptjs';
import { query } from '../config/database.js';
import { verifyStaffToken } from '../middleware/auth.js';
import { body, validationResult } from 'express-validator';

const router = express.Router();

// Apply staff authentication to all admin routes
router.use(verifyStaffToken);

/**
 * GET /api/admins
 * Get all admins
 */
router.get('/', async (req, res) => {
  try {
    const admins = await query(
      `SELECT
        u.user_id,
        u.staff_id,
        u.full_name,
        u.email,
        u.phone,
        u.is_active,
        u.is_online,
        u.last_login,
        u.created_at,
        u.role,
        creator.full_name as created_by_name
       FROM users u
       LEFT JOIN users creator ON u.created_by = creator.user_id
       WHERE u.role IN ('admin', 'superadmin')
       ORDER BY u.created_at DESC`
    );

    res.json({
      success: true,
      data: admins
    });
  } catch (error) {
    console.error('Get admins error:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching admins',
      error: error.message
    });
  }
});

/**
 * GET /api/admins/:id
 * Get admin details
 */
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const admin = await query(
      `SELECT
        u.*,
        creator.full_name as created_by_name
       FROM users u
       LEFT JOIN users creator ON u.created_by = creator.user_id
       WHERE (u.user_id = ? OR u.staff_id = ?) AND u.role IN ('admin', 'superadmin')`,
      [id, id]
    );

    if (admin.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Admin not found'
      });
    }

    // Get audit logs for this admin
    const auditLogs = await query(
      `SELECT * FROM Audit_Logs
       WHERE performed_by = ?
       ORDER BY timestamp DESC
       LIMIT 50`,
      [admin[0].user_id]
    );

    res.json({
      success: true,
      data: {
        admin: admin[0],
        auditLogs
      }
    });
  } catch (error) {
    console.error('Get admin details error:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching admin details',
      error: error.message
    });
  }
});

/**
 * POST /api/admins
 * Create new admin account
 */
router.post(
  '/',
  [
    body('email').isEmail().withMessage('Must be a valid email address'),
    body('password').isLength({ min: 8 }).withMessage('Password must be at least 8 characters'),
    body('fullName').notEmpty().withMessage('Full name is required'),
    body('phone').optional(),
    body('role').isIn(['admin', 'superadmin']).withMessage('Role must be admin or superadmin')
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    }

    try {
      const { email, password, fullName, phone, role } = req.body;
      const createdBy = req.user.userId;

      // Check if user is authorized to create admins (must be superadmin)
      const currentUser = await query(
        'SELECT role FROM users WHERE user_id = ?',
        [createdBy]
      );

      if (currentUser.length === 0 || currentUser[0].role !== 'admin') {
        return res.status(403).json({
          success: false,
          message: 'Only admins can create admin accounts'
        });
      }

      // Check if email already exists
      const existing = await query(
        'SELECT * FROM users WHERE email = ?',
        [email]
      );

      if (existing.length > 0) {
        return res.status(409).json({
          success: false,
          message: 'Email already exists'
        });
      }

      // Hash password
      const passwordHash = await bcrypt.hash(password, 10);

      // Insert admin (staff_id will be auto-generated by trigger)
      const result = await query(
        `INSERT INTO users (email, password_hash, role, full_name, phone, is_active, created_by)
         VALUES (?, ?, ?, ?, ?, TRUE, ?)`,
        [email, passwordHash, role, fullName, phone || null, createdBy]
      );

      const adminId = result.insertId;

      // Get the generated staff_id
      const newAdmin = await query(
        'SELECT user_id, staff_id, email, full_name, role FROM users WHERE user_id = ?',
        [adminId]
      );

      res.status(201).json({
        success: true,
        message: 'Admin account created successfully',
        data: {
          userId: newAdmin[0].user_id,
          staffId: newAdmin[0].staff_id,
          email: newAdmin[0].email,
          fullName: newAdmin[0].full_name,
          role: newAdmin[0].role
        }
      });
    } catch (error) {
      console.error('Create admin error:', error);
      res.status(500).json({
        success: false,
        message: 'Error creating admin account',
        error: error.message
      });
    }
  }
);

/**
 * PUT /api/admins/:id/toggle-status
 * Toggle admin active status
 */
router.put('/:id/toggle-status', async (req, res) => {
  try {
    const { id } = req.params;

    // Get current status
    const admin = await query(
      'SELECT is_active FROM users WHERE (user_id = ? OR staff_id = ?) AND role IN (?, ?)',
      [id, id, 'admin', 'superadmin']
    );

    if (admin.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Admin not found'
      });
    }

    // Toggle status
    await query(
      'UPDATE users SET is_active = ? WHERE user_id = ?',
      [!admin[0].is_active, id]
    );

    res.json({
      success: true,
      message: `Admin account ${!admin[0].is_active ? 'activated' : 'deactivated'} successfully`
    });
  } catch (error) {
    console.error('Toggle admin status error:', error);
    res.status(500).json({
      success: false,
      message: 'Error updating admin status',
      error: error.message
    });
  }
});

/**
 * DELETE /api/admins/:id
 * Delete/Revoke admin account
 */
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const performedBy = req.user.userId;

    // Check if user is authorized (must be admin)
    const currentUser = await query(
      'SELECT role FROM users WHERE user_id = ?',
      [performedBy]
    );

    if (currentUser.length === 0 || currentUser[0].role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Only admins can delete admin accounts'
      });
    }

    // Verify the account to delete exists and is an admin
    const adminToDelete = await query(
      'SELECT * FROM users WHERE (user_id = ? OR staff_id = ?) AND role IN (?, ?)',
      [id, id, 'admin', 'superadmin']
    );

    if (adminToDelete.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Admin not found'
      });
    }

    // Prevent self-deletion
    if (adminToDelete[0].user_id === performedBy) {
      return res.status(400).json({
        success: false,
        message: 'You cannot delete your own account'
      });
    }

    // Delete the admin account
    await query(
      'DELETE FROM users WHERE user_id = ?',
      [adminToDelete[0].user_id]
    );

    res.json({
      success: true,
      message: 'Admin account deleted successfully'
    });
  } catch (error) {
    console.error('Delete admin error:', error);
    res.status(500).json({
      success: false,
      message: 'Error deleting admin account',
      error: error.message
    });
  }
});

/**
 * GET /api/admins/search
 * Search admins
 */
router.get('/search/query', async (req, res) => {
  try {
    const { q } = req.query;

    if (!q) {
      return res.status(400).json({
        success: false,
        message: 'Search query is required'
      });
    }

    const searchPattern = `%${q}%`;

    const admins = await query(
      `SELECT
        u.user_id,
        u.staff_id,
        u.full_name,
        u.email,
        u.phone,
        u.is_active,
        u.last_login,
        u.role
       FROM users u
       WHERE u.role IN ('admin', 'superadmin')
       AND (
         u.full_name LIKE ? OR
         u.staff_id LIKE ? OR
         u.email LIKE ?
       )
       ORDER BY u.full_name`,
      [searchPattern, searchPattern, searchPattern]
    );

    res.json({
      success: true,
      data: admins
    });
  } catch (error) {
    console.error('Search admins error:', error);
    res.status(500).json({
      success: false,
      message: 'Error searching admins',
      error: error.message
    });
  }
});

export default router;
